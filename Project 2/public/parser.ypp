%{
    #include <stdio.h>
    #include <stdlib.h>
    #define YYDEBUG 1

    int yylex(void);
    void yyerror(const char *);
%}

/* Enables verbose error messages */
%error-verbose

/** WRITE ME:
 *  - Put all your token definitions here
 *  - Put all your type definitions here
 *  - Put all your precedence/associativity rules here
 */

/*keywords*/
 %token BOOLEAN
 %token CHAR 
 %token INTEGER
 %token STRING 
 %token INTPTR 
 %token CHARPTR
 %token IF
 %token ELSE 
 %token WHILE 
 %token VAR 
 %token PROCEDURE 
 %token RETURN 

 /*operators*/
 %token AND
 %token DIVIDE
 %token EQUAL
 %token BOOL_EQUAL
 %token GREATER_THAN
 %token GREATER_THAN_OR_EQUAL
 %token LESS_THAN
 %token LESS_THAN_OR_EQUAL
 %token MINUS
 %token NOT
 %token NOT_EQUAL
 %token OR 
 %token PLUS
 %token TIMES
 %token AMPERSAND
 %token CARET
 %token NULL_TOKEN

 /*literals*/
 %token BOOL_LITERAL
 %token CHAR_LITERAL
 %token INTEGER_LITERAL
 %token STRING_LITERAL
 %token IDENTIFIER_LITERAL
 %token POINTER_LITERAL
 
 /*other*/
 %token SEMICOLON
 %token COLON
 %token COMMA
 %token BAR_INT
 %token BAR_STRING
 %token OPEN_CURLY
 %token CLOSE_CURLY
 %token OPEN_PARAN
 %token CLOSE_PARAN
 %token OPEN_SQUARE
 %token CLOSE_SQUARE

%%

/** WRITE ME:
 *  This is the language from Project 1. You need to put the productions for
 *  the grammar for the language for this project here.
 */

List    : List Expr '.' {printf("parsed expresion\n");}
        | Expr '.' {printf("parsed expresion\n");}
        | BOOLEAN '.' {printf("Got a boolean!\n");}
        ;

Expr    : Expr '+' Expr 
        | Expr '-' Expr 
        | Expr '*' Expr
        | 'n'
        | '-' Expr  
        | '(' Expr ')'
        | '|' Expr '|'
        ;

%%

/** You shall not pass!
 *  You should not  have to do or edit anything past this.
 */

extern int yylineno;

void yyerror(const char *s)
{
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    exit(1);
}
